 /* Systeme etalonnage sonde PH
  * Integration de deux sondes virtuel Oregon scientifique pour envoie à la domotique en RF433
  * Auto configuration suivant type de carte ESP8266 // EPS32
  * https://dl.espressif.com/dl/package_esp32_index.json
  * https://arduino.esp8266.com/stable/package_esp8266com_index.json
  * 
  * tools:
  * https://github.com/me-no-dev/arduino-esp32fs-plugin/releases/
  * https://github.com/esp8266/arduino-esp8266fs-plugin/releases
  * 
  * RF433 ESP8266 Pin D8 ESP32 Pin D15
  * 
  * Onwire ESP8266 Pin D2   ESP32 Pin D4
  * 
  *     ESP8266                 ESP32
  * SDA=D0    SCL=D2         SDA=D21  SCL=D22
  * 
  * https://github.com/espressif/arduino-esp32/tree/master/libraries/EEPROM
  * 
  * Il faut inclure les lib ESPAsyncWeb et TCP manuellement
  * https://github.com/me-no-dev/ESPAsyncWebServer
  * Esp8266
  * https://github.com/me-no-dev/ESPAsyncTCP
  * 
  * ESP32
  * https://github.com/me-no-dev/AsyncTCP
  * https://github.com/pellepl/spiffs
  * 
  * BP WIFI
  *      ESP8266                 ESP32
  *      PIN=D1                PIN=D5   
  */
 
 
#include <Arduino.h>

/* Definition de la carte et options*/
//#define SondePH
#define SondePression
#define SondeTEMP
#define RF433
#define Ecran

#ifdef SondePH
  #define WIFI_ON // Activation du wifi
  #define ADS1X15
  #define Calc_Propor_On
  #define SPIFF_ON


  /*RAM Lecture / ecriture*/
  int calc_CONV_ACID;
  int calc_PH_ACID;
  int calc_PH_BASIC;
  int calc_CONV_BASIC;
 

  #ifdef ESP8266
     #include <EEPROM.h> 
     #include <LittleFS.h>
     /* Gestion des Fichiers*/
     # include <FS.h>
     /* Adresse dans l'EEPROM*/
      int addr_PH_ACID = 0;         // PH_ACID index
      int addr_Conv_ACID = 5;         // Conv_ACID index
      int addr_PH_BASIC = 10;         // PH_BASIC index
      int addr_Conv_BASIC = 15;         // Conv_BASIC index
   #else
     /* ESP32 Dependencies */
     /* Gestion des Fichiers*/ 
     #include <SPIFFS.h>
     
     /* EEPROM*/
     #include <Preferences.h> 
     Preferences Base_Value;
  #endif
  
  /* Variables associées ADS1115 PH*/
  float valeurPH4_Base,valeurPH10_Base;
  float PHSend = 0.0;
  float LastPH =0.0;
  float PH_Moyen_Input=0.0;  
#endif

#ifdef SondePression
  #ifndef SondePH
    #define ADS1X15
    #define WIFI_ON // Activation du wifi
    #define Calc_Propor_On //Activation fonction Proportionnel
    #define SPIFF_ON

    #include <LittleFS.h>
    #include <EEPROM.h> 
     /* Gestion des Fichiers*/
     # include <FS.h>

  #endif

 float Pression_Moyen_Input=0.0;
 float PressionCalc, PressionSend;
 /*RAM Lecture / ecriture*/
  int calc_CONV_PressionB;
  int calc_Pression_Basse;
  int calc_Pression_Haute;
  int calc_CONV_PressionH;

  #ifdef ESP8266
     
     /* Adresse dans l'EEPROM*/
      int addr_Pression_Bas = 20;         // Pression bas index
      int addr_Conv_Press_Bas = 25;         // Conv_bas index
      int addr_Pression_Haut = 30;         // PPression Haut index
      int addr_Conv_Press_Haut = 35;         // Conv_Haut index
   #else
    #ifndef SondePH
   
     /* ESP32 Dependencies */
     /* Gestion des Fichiers*/ 
     #include <SPIFFS.h>
     
     /* EEPROM*/
     #include <Preferences.h> 
     Preferences Base_Value;
     
     #endif
     
  #endif

   /* Variables associées ADS1115 PH*/
  float valeurPressionB_Base,valeurPressionH_Base;
  //float PressionSend = 0.0;
  float LastPression =0.0;
  //float Pression_Moyen_Input=0.0;  
#endif

#ifdef ADS1X15
  /*convertisseur pour PH ADS1115*/
  #include <Adafruit_ADS1X15.h>
  Adafruit_ADS1115 ads; /* Use this for the 16-bit version */

  /* Variables associées ADS1115 GLOBAL*/
  int samples = 25; /* Nb d'echantillons*/
  int16_t adc0, adc1, adc2, adc3;
  float adc_resolution = 1024.0; /* Résolution */
  float measurings0=0,measurings2=0, volt0, volt2;

#endif

#ifdef WIFI_ON
   
   int wifi_enable = 0;

   #define Pin_Inter_Wifi 5    //Pour inter activation wifi

  #ifdef ESP8266
    /* ESP8266 Dependencies */
    #include <ESP8266WiFi.h>
    #include <ESPAsyncTCP.h>
    #include <ESPAsyncWebServer.h>
     
  #else
   /* ESP32 Dependencies */
    #include <WiFi.h>
    #include <AsyncTCP.h>
    #include <ESPAsyncWebServer.h>
    
  #endif
  AsyncWebServer server(80); 
#endif

#ifndef Ecran
    #ifdef ADS1X15 
      #define I2C_On
    #endif
#else
  #define I2C_On 
#endif

#ifdef I2C_On 
  #include <Wire.h>
  
  #ifdef ESP8266
    int SDA_Send= 0, SCL_Send=2;
  #else
    int SDA_Send= 21, SCL_Send=22;
  #endif

#endif

#ifdef Ecran
  /* Ecran */
  #include <Adafruit_GFX.h>
  #include <Adafruit_SSD1306.h>
  
  #define I2C_On
  #define SCREEN_WIDTH 128 // OLED display width, in pixels
  #define SCREEN_HEIGHT 64 // OLED display height, in pixels
   
  // Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
  #define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
  #define SCREEN_ADDRESS 0x3c ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
  Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
  
#endif

#ifdef SondeTEMP
  /* On Wire Sonde DS18B20*/
  #include <OneWire.h>
  
  // Data wire is plugged into port 4 on the Arduino or ESP32
  #define ONE_WIRE_BUS 4 // Entrée D2
  #define TEMPERATURE_PRECISION 10
  #define THN132N
  
  // Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
  OneWire ds(ONE_WIRE_BUS);
  
  
  // Tableaux contenant l'adresse de chaque sonde OneWire | arrays to hold device addresses
  //const byte SENSOR_ADDRESS_1[] = { 0x28,  0xFF,  0xCA,  0xD9,  0x2,  0x17,  0x3,  0x6A};
  const byte SENSOR_ADDRESS_1[] = { 0x28,  0xFF,  0x64,  0x1E,  0xD,  0x99,  0xC8,  0x2};
  
  /* Def des variables*/ 
  float TempSend = 0.0;
  float LastTemp = 0.0;
#endif


#ifdef RF433
  /** RF433  **/
  const byte TX_PIN = 15;
  const unsigned long TIME = 512;
  const unsigned long TWOTIME = TIME*2;
     
  #define SEND_HIGH() digitalWrite(TX_PIN, HIGH)
  #define SEND_LOW() digitalWrite(TX_PIN, LOW)

  /********************************************* Simulation Sonde Oregon*********************************************/
  
  /* Buffer for Oregon message */
  #ifdef THN132N
    byte OregonMessageBuffer[8];
  #else
    byte OregonMessageBuffer[9];
  #endif
  
  /**
   * \brief    Send logical "0" over RF
   * \details  azero bit be represented by an off-to-on transition
   * \         of the RF signal at the middle of a clock period.
   * \         Remenber, the Oregon v2.1 protocol add an inverted bit first 
   */
  inline void sendZero(void) 
  {
    SEND_HIGH();
    delayMicroseconds(TIME);
    SEND_LOW();
    delayMicroseconds(TWOTIME);
    SEND_HIGH();
    delayMicroseconds(TIME);
  }
   
  /**
   * \brief    Send logical "1" over RF
   * \details  a one bit be represented by an on-to-off transition
   * \         of the RF signal at the middle of a clock period.
   * \         Remenber, the Oregon v2.1 protocol add an inverted bit first 
   */
  inline void sendOne(void) 
  {
     SEND_LOW();
     delayMicroseconds(TIME);
     SEND_HIGH();
     delayMicroseconds(TWOTIME);
     SEND_LOW();
     delayMicroseconds(TIME);
  }
   
  /**
  * Send a bits quarter (4 bits = MSB from 8 bits value) over RF
  *
  * @param data Source data to process and sent
  */
   
  /**
   * \brief    Send a bits quarter (4 bits = MSB from 8 bits value) over RF
   * \param    data   Data to send
   */
  inline void sendQuarterMSB(const byte data) 
  {
    (bitRead(data, 4)) ? sendOne() : sendZero();
    (bitRead(data, 5)) ? sendOne() : sendZero();
    (bitRead(data, 6)) ? sendOne() : sendZero();
    (bitRead(data, 7)) ? sendOne() : sendZero();
  }
   
  /**
   * \brief    Send a bits quarter (4 bits = LSB from 8 bits value) over RF
   * \param    data   Data to send
   */
  inline void sendQuarterLSB(const byte data) 
  {
    (bitRead(data, 0)) ? sendOne() : sendZero();
    (bitRead(data, 1)) ? sendOne() : sendZero();
    (bitRead(data, 2)) ? sendOne() : sendZero();
    (bitRead(data, 3)) ? sendOne() : sendZero();
  }
   
  /******************************************************************/
  /******************************************************************/
  /******************************************************************/
   
  /**
   * \brief    Send a buffer over RF
   * \param    data   Data to send
   * \param    size   size of data to send
   */
  void sendData(byte *data, byte size)
  {
    for(byte i = 0; i < size; ++i)
    {
      sendQuarterLSB(data[i]);
      sendQuarterMSB(data[i]);
    }
  }
   
  /**
   * \brief    Send preamble
   * \details  The preamble consists of 16 "1" bits
   */
  
  inline void sendPreamble(void)
  //void sendPreamble(void)
  {
    byte PREAMBLE[]={0xFF,0xFF};
    sendData(PREAMBLE, 2);
  }
   
  /**
   * \brief    Send postamble
   * \details  The postamble consists of 8 "0" bits
   */
  inline void sendPostamble(void)
  //void sendPostamble(void)
  {
  #ifdef THN132N
    sendQuarterLSB(0x00);
  #else
    byte POSTAMBLE[]={0x00};
    sendData(POSTAMBLE, 1);  
  #endif
  }
  /**
   * \brief    Send an Oregon message
   * \param    data   The Oregon message
   */
  void sendOregon(byte *data, byte size)
  {
      sendPreamble();
      //sendSync();
      sendData(data, size);
      sendPostamble();
  }
   
   
  /**
   * \brief    Send sync nibble
   * \details  The sync is 0xA. It is not use in this version since the sync nibble
   * \         is include in the Oregon message to send.
   */
  inline void sendSync(void)
  {
    sendQuarterLSB(0xA);
  }
   
  /******************************************************************/
  /******************************************************************/
  /******************************************************************/
   
  /**
   * \brief    Set the sensor type
   * \param    data       Oregon message
   * \param    type       Sensor type
   */
  inline void setType(byte *data, byte* type) 
  {
    data[0] = type[0];
    data[1] = type[1];
  }
   
  /**
   * \brief    Set the sensor channel
   * \param    data       Oregon message
   * \param    channel    Sensor channel (0x10, 0x20, 0x30)
   */
  inline void setChannel(byte *data, byte channel) 
  {
      data[2] = channel;
  }
   
  /**
   * \brief    Set the sensor ID
   * \param    data       Oregon message
   * \param    ID         Sensor unique ID
   */
  inline void setId(byte *data, byte ID) 
  {
    data[3] = ID;
  }
   
  /**
   * \brief    Set the sensor battery level
   * \param    data       Oregon message
   * \param    level      Battery level (0 = low, 1 = high)
   */
  void setBatteryLevel(byte *data, byte level)
  {
    if(!level) data[4] = 0x0C;
    else data[4] = 0x00;
  }
   
  /**
   * \brief    Set the sensor temperature
   * \param    data       Oregon message
   * \param    temp       the temperature
   */
  void setTemperature(byte *data, float temp) 
  {
    // Set temperature sign
    if(temp < 0)
    {
      data[6] = 0x08;
      temp *= -1;  
    }
    else
    {
      data[6] = 0x00;
    }
   
    // Determine decimal and float part
    int tempInt = (int)temp;
    int td = (int)(tempInt / 10);
    int tf = (int)round((float)((float)tempInt/10 - (float)td) * 10);
   
    int tempFloat =  (int)round((float)(temp - (float)tempInt) * 10);
   
    // Set temperature decimal part
    data[5] = (td << 4);
    data[5] |= tf;
   
    // Set temperature float part
    data[4] |= (tempFloat << 4);
    Serial.println(temp);
  }
   
  /**
   * \brief    Set the sensor humidity
   * \param    data       Oregon message
   * \param    hum        the humidity
   */
  void setHumidity(byte* data, byte hum)
  {
      data[7] = (hum/10);
      data[6] |= (hum - data[7]*10) << 4;
  }
   
  /**
   * \brief    Sum data for checksum
   * \param    count      number of bit to sum
   * \param    data       Oregon message
   */
  int Sum(byte count, const byte* data)
  {
    int s = 0;
   
    for(byte i = 0; i<count;i++)
    {
      s += (data[i]&0xF0) >> 4;
      s += (data[i]&0xF);
    }
   
    if(int(count) != count)
      s += (data[count]&0xF0) >> 4;
   
    return s;
  }
   
  /**
   * \brief    Calculate checksum
   * \param    data       Oregon message
   */
  void calculateAndSetChecksum(byte* data)
  {
  #ifdef THN132N
      int s = ((Sum(6, data) + (data[6]&0xF) - 0xa) & 0xff);
   
      data[6] |=  (s&0x0F) << 4;     data[7] =  (s&0xF0) >> 4;
  #else
      data[8] = ((Sum(8, data) - 0xa) & 0xFF);
  #endif
  }
   
  /******************************************************************/
  /******************************************************************/
  /******************************************************************/
  
  /*Oregon*/
  
  void oregon_send( byte ID, float TempSend){
    Serial.println(" ");
    Serial.println("***** Start Oregon Send *****");
    setId(OregonMessageBuffer, ID);
    // Get Temperature, humidity and battery level from sensors
    // (ie: 1wire DS18B20 for température, ...)
    setBatteryLevel(OregonMessageBuffer, 0); // 0 : low, 1 : high
    setTemperature(OregonMessageBuffer, TempSend);
   
    #ifndef THN132N
      // Set Humidity
      setHumidity(OregonMessageBuffer, 52);
    #endif  
   
    // Calculate the checksum
    calculateAndSetChecksum(OregonMessageBuffer);
   
    // Show the Oregon Message
      for (byte i = 0; i < sizeof(OregonMessageBuffer); ++i)   {     Serial.print(OregonMessageBuffer[i] >> 4, HEX);
        Serial.print(OregonMessageBuffer[i] & 0x0F, HEX);
      }
   
    // Send the Message over RF
    sendOregon(OregonMessageBuffer, sizeof(OregonMessageBuffer));
    // Send a "pause"
    SEND_LOW();
    delayMicroseconds(TWOTIME*8);
    // Send a copie of the first message. The v2.1 protocol send the
    // message two time 
    sendOregon(OregonMessageBuffer, sizeof(OregonMessageBuffer));
   
    // Wait for 30 seconds before send a new message 
    SEND_LOW();
  Serial.println(" ");
  Serial.println("***** END *****");
  }
#endif

#ifdef SondeTEMP
  /*** Fonction de lecture de la température via un capteur DS18B20. ***/
  float getTemperature(const byte addr[]) {
    byte data[9];
    // data[] : Données lues depuis le scratchpad
    // addr[] : Adresse du module 1-Wire détecté
    
    /* Reset le bus 1-Wire et sélectionne le capteur */
    ds.reset();
    ds.select(addr);
    
    /* Lance une prise de mesure de température et attend la fin de la mesure */
    ds.write(0x44, 1);
    delay(800);
    
    /* Reset le bus 1-Wire, sélectionne le capteur et envoie une demande de lecture du scratchpad */
    ds.reset();
    ds.select(addr);
    ds.write(0xBE);
   
   /* Lecture du scratchpad */
    for (byte i = 0; i < 9; i++) {
      data[i] = ds.read();
    }
     
    /* Calcul de la température en degré Celsius */
    return (int16_t) ((data[1] << 8) | data[0]) * 0.0625;  //0.0625
  }
#endif

#ifdef Calc_Propor_On

  /*************    Calcul du PH/ Pression Proportionnel    *************/
  float Cal_Propor(float Conv_Input,float Ref_Low, float Ref_Hight, float Conv_Low, float Conv_Hight) {
     float coef_a, coef_b, Result_Calc;
  
      /* Calcul coef A*/
      coef_a = ((Ref_Low-Ref_Hight)/(Conv_Low-Conv_Hight));
  
      /* Calcul B*/
      coef_b= Ref_Low - (Conv_Low * coef_a);
  
      /* Calcul Final*/
      Result_Calc = ((Conv_Input * coef_a) + coef_b);
      Serial.println("");
      Serial.println("---------------------------");
      Serial.println("Calcul Propo values");
      Serial.printf("Ref value: %f\n",Conv_Input);
      Serial.printf("Ref low: %f\n",Ref_Low);
      Serial.printf("conv low: %f\n",Conv_Low);
      Serial.printf("ref High: %f\n",Ref_Hight);
      Serial.printf("conv High: %f\n",Conv_Hight);
      Serial.printf("Coef A: %f\n",coef_a);
      Serial.printf("Coef B: %f\n",coef_b);
      Serial.printf("Conv Input: %f\n",Conv_Input);
      Serial.printf("Propo result: %f\n",Result_Calc/100);
      Serial.printf("Coef A * Input= %f\n",Conv_Input * coef_a);
      Serial.println("---------------------------");
      Serial.println("");
      Result_Calc = Result_Calc/100;
  
      if (Result_Calc > 14.0 ){
        Result_Calc =14.0;
      }
      else if (Result_Calc < 0.0){
         Result_Calc =0.0;
      }
     
      return Result_Calc;
  }
  #endif


#ifdef SondePH

  /********* Etalonnage PH base 4 *********/
  void Base_PH_4(){
     Serial.print("Before to send ON PH4: ");
     
     int PHSend_EEPROM = int (valeurPH4_Base * 100);
     Serial.printf("PH_Send to Eeprom: %i\n",PHSend_EEPROM);
     
     #ifdef ESP8266
        Update_EEPROM(addr_PH_ACID, PHSend_EEPROM);
        Update_EEPROM(addr_Conv_ACID, adc0);

        /***** DEBUG *****/
        Serial.println("");
        read_EEPROM(addr_PH_ACID,calc_PH_ACID);
        read_EEPROM(addr_Conv_ACID,calc_CONV_ACID);
        Serial.printf("PH ACID: %i\n",calc_PH_ACID);
        Serial.printf("Cnv ACID: %i\n",calc_CONV_ACID);
        

     #else
        Base_Value.putInt("PH_Acid",PHSend_EEPROM);
        Base_Value.putInt("Conv_Acid",adc0);
         /***** DEBUG *****/
         calc_PH_ACID = Base_Value.getInt("PH_Acid",0);
         calc_CONV_ACID = Base_Value.getInt("Conv_Acid",0);
    
        Serial.printf("PH ACID: %i\n",calc_PH_ACID);
        Serial.printf("Cnv ACID: %i\n",calc_CONV_ACID);
            
     #endif
     
  }
  
  /********* Etalonnage PH base 10 *********/
  void Base_PH_10(){
   
    Serial.print("Before to send on PH10: ");
     int PHSend_EEPROM = int (valeurPH10_Base * 100);
     Serial.println(PHSend_EEPROM);
     
     #ifdef ESP8266
        Update_EEPROM(addr_PH_BASIC, PHSend_EEPROM);
        Update_EEPROM(addr_Conv_BASIC, adc0);
        
        /***** DEBUG *****/
        Serial.println("");
        Serial.printf("Send for print: %i\n",adc0);  
        read_EEPROM(addr_Conv_BASIC,calc_CONV_BASIC);
        read_EEPROM(addr_PH_BASIC,calc_PH_BASIC);
        Serial.printf("PH BASIC: %i\n",calc_PH_BASIC);
        Serial.printf("Conv BASIC: %i\n",calc_CONV_BASIC);
        
     #else
        Base_Value.putInt("PH_Basic",PHSend_EEPROM);
        Base_Value.putInt("Conv_Basic",adc0);
         /***** DEBUG *****/
        Serial.println("");
        Serial.printf("Send for print: %i\n",adc0);   

        calc_PH_BASIC = Base_Value.getInt("PH_Basic",0);
        calc_CONV_BASIC = Base_Value.getInt("Conv_Basic",0);
        Serial.printf("PH BASIC: %i\n",calc_PH_BASIC);
        Serial.printf("Conv BASIC: %i\n",calc_CONV_BASIC);

     #endif
    
  }
    
#endif

#ifdef SPIFF_ON
  #ifdef ESP8266
      /********* Lecture EEprom *********/
      void read_EEPROM(int addresse, int &variable){
        Serial.println("Check Reading");
        EEPROM.get(addresse,variable);
        Serial.println(variable);
      }

      /********* Effacement EEprom *********/
      void Clear_EEPROM(int addresse){
        // write a 0 to all 512 bytes of the EEPROM
        for (int i = addresse; i < (addresse + 5); i++) {
          EEPROM.write(i, 0);
          EEPROM.commit();
        }
        Serial.println("Clear Address");
        Serial.println(addresse);
        Serial.println("Clear EEPROM DONE");
      }
      
      /********* Update EEprom *********/
      void Update_EEPROM(int addresse, int variable){
        int val_conv_send = variable;
        Serial.println("Update EEPROM");
        Serial.println(addresse);
        Serial.println(val_conv_send);
      
        Clear_EEPROM(addresse);
        EEPROM.put(addresse, val_conv_send);
        Serial.println("Val send: ");
        Serial.println(val_conv_send);
        Serial.println("");
        
        if (EEPROM.commit()) {
          Serial.println("Data successfully committed");
        } else {
          Serial.println("ERROR! Data commit failed");
        }
      }

    #else

    #endif

    #ifndef ESP8266
  void listDir(char * dir){
 
        File root = SPIFFS.open(dir);
        File file = root.openNextFile();
       
        while(file){
       
            Serial.print("FILE: ");
            Serial.println(file.name());
            file = root.openNextFile();
        }
       
      }
  #endif
#endif

#ifdef SondePression
//
 /********* Etalonnage Pression Basse *********/
  void Pression_Basse(){
     Serial.print("Before to send ON PressionB: ");
     
     int PressionSend_EEPROM = int (valeurPressionB_Base * 100);
     Serial.printf("Pression_Send to Eeprom: %i\n",PressionSend_EEPROM);
     
     #ifdef ESP8266
        Update_EEPROM(addr_Pression_Bas, PressionSend_EEPROM);
        Update_EEPROM(addr_Conv_Press_Bas, adc2);

        /***** DEBUG *****/
        Serial.println("");
        read_EEPROM(addr_Pression_Bas,calc_Pression_Basse);
        read_EEPROM(addr_Conv_Press_Bas,calc_CONV_PressionB);
        Serial.printf("Pression Basse: %i\n",calc_Pression_Basse);
        Serial.printf("Cnv Pression Basse: %i\n",calc_CONV_PressionB);
       

     #else
        Base_Value.putInt("Pression base",PressionSend_EEPROM);
        Base_Value.putInt("Conv_Acid",adc2);
         /***** DEBUG *****/
         calc_Pression_Basse = Base_Value.getInt("Pression_Basse",0);
         calc_CONV_PressionB = Base_Value.getInt("Conv_PressionB",0);
    
        Serial.printf("Pression Basse: %i\n",calc_Pression_Basse);
        Serial.printf("Cnv Pression Basse: %i\n",calc_CONV_PressionB);
            
     #endif
     
  }
  
  /********* Etalonnage Pression Haute *********/
  void Pression_Haute(){
   
    Serial.print("Before to send on PH10: ");
     int PressionSend_EEPROM = int (valeurPressionH_Base * 100);
     Serial.println(PressionSend_EEPROM);
     
     #ifdef ESP8266
        Update_EEPROM(addr_Pression_Haut, PressionSend_EEPROM);
        Update_EEPROM(addr_Conv_Press_Haut, adc2);
        
        /***** DEBUG *****/
        Serial.println("");
        Serial.printf("Send for print: %i\n",adc2);  
        Serial.printf("Pression Haute: %i\n",calc_Pression_Haute);
        Serial.printf("Conv Pression Haute: %i\n",calc_CONV_PressionH);
        read_EEPROM(addr_Conv_Press_Haut,calc_CONV_PressionH);
        read_EEPROM(addr_Pression_Haut,calc_Pression_Haute);
     #else
        Base_Value.putInt("Pression_Haute",PressionSend_EEPROM);
        Base_Value.putInt("Conv_Pression_Haute",adc2);
         /***** DEBUG *****/
        Serial.println("");
        Serial.printf("Send for print: %i\n",adc2);   

        calc_Pression_Haute = Base_Value.getInt("Pression_Haute",0);
        calc_CONV_PressionH = Base_Value.getInt("Conv_PressionH",0);
        Serial.printf("Pression Haute: %i\n",calc_Pression_Haute);
        Serial.printf("Conv Pression Haute: %i\n",calc_CONV_PressionH);

     #endif

  }
#endif

void Wifi_start()
{
    
    
    //----------------------------------------------------WIFI
     Serial.println("Wifi on");
      WiFi.mode(WIFI_AP);
      WiFi.softAP("ESP8266_PH", "ESP8266_Etallonage");
}

void setup()
{
  
  //----------------------------------------------------Serial
  Serial.begin(115200);
  Serial.println("\n");

#ifdef WIFI_ON
  pinMode(Pin_Inter_Wifi, INPUT_PULLUP);

  //----------------------------------------------------SPIFFS
    if(!LittleFS.begin())
      {
        Serial.println("Erreur SPIFFS...");
        return;
      }
      
    delay(1000);
    Serial.println("");
    Serial.println("Start Read File system");
   
    #ifdef ESP8266
     Dir dir = LittleFS.openDir ("");
    while (dir.next ()) {
      Serial.println (dir.fileName ());
      Serial.println (dir.fileSize ());
    }
    #else
      
      Serial.println("\n----DIR: /");
        listDir("/");
    #endif

     #ifdef SondePh
    //----------------------------------------------------SERVER
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
    {
      request->send(LittleFS, "/index.html", "text/html");
    });
    #endif

    #ifdef SondePression
    //----------------------------------------------------SERVER
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
    {
      request->send(LittleFS, "/Pression.html", "text/html");
    });
    #endif

    server.on("/w3.css", HTTP_GET, [](AsyncWebServerRequest *request)
    {
      request->send(LittleFS, "/w3.css", "text/css");
    });
  
    server.on("/script.js", HTTP_GET, [](AsyncWebServerRequest *request)
    {
      request->send(LittleFS, "/script.js", "text/javascript");
    });
  
    server.on("/jquery-3.6.0.min.js", HTTP_GET, [](AsyncWebServerRequest *request)
    {
      request->send(LittleFS, "/jquery-3.6.0.min.js", "text/javascript");
    });
  
    server.on("/lireCONV", HTTP_GET, [](AsyncWebServerRequest *request)
    {
      #ifdef SondePH
        int val = adc0;
        String PH_CONV_Send = String(val);
        request->send(200, "text/plain", PH_CONV_Send);
      #endif

      #ifdef SondePression
        int val2 = adc2;
        String Pression_CONV_Send = String(val2);
        request->send(200, "text/plain", Pression_CONV_Send);
      #endif

    });
  
    server.on("/lireTEMP", HTTP_GET, [](AsyncWebServerRequest *request)
    {
      #ifdef SondeTEMP
        float val = TempSend;
        String Temp_Send_HTML = String(val);
      #else
        String Temp_Send_HTML ="Not Used";
      #endif
      
      request->send(200, "text/plain", Temp_Send_HTML);
    });

  #ifdef SondePH
    server.on("/lirePH", HTTP_GET, [](AsyncWebServerRequest *request)
    {
      float val = PHSend;
      String PH_Send_HTML = String(val);
      request->send(200, "text/plain", PH_Send_HTML);
    });
  
    server.on("/SendPH4Value", HTTP_POST, [](AsyncWebServerRequest *request)
      {
        String message;
        message = request->getParam("valeurPH4_Base", true)->value();
        valeurPH4_Base = message.toFloat();
        Serial.print("Send PH4 value :");
        Serial.println(valeurPH4_Base);
        Base_PH_4();
        request->send(204);
      });
    
      server.on("/SendPH10Value", HTTP_POST, [](AsyncWebServerRequest *request)
      {
        String message;
        message = request->getParam("valeurPH10_Base", true)->value();
        valeurPH10_Base = message.toFloat();
         Serial.printf("Send PH10 value : %f\n",valeurPH10_Base);
         Base_PH_10();
        request->send(204);
    });
  #endif

  #ifdef SondePression
    server.on("/lirePression", HTTP_GET, [](AsyncWebServerRequest *request)
    {
      float val = PressionSend;
      String Pression_Send_HTML = String(val);
      request->send(200, "text/plain", Pression_Send_HTML);
    });
  
    server.on("/SendPressionBValue", HTTP_POST, [](AsyncWebServerRequest *request)
      {
        String message;
        message = request->getParam("valeurPressionB_Base", true)->value();
        valeurPressionB_Base = message.toFloat();
        Serial.print("Send Pression Low value :");
        Serial.println(valeurPressionB_Base);
        Pression_Basse();
        request->send(204);
      });
    
      server.on("/SendPressionHValue", HTTP_POST, [](AsyncWebServerRequest *request)
      {
        String message;
        message = request->getParam("valeurPressionH_Base", true)->value();
        valeurPressionH_Base = message.toFloat();
         Serial.printf("Send PH10 value : %f\n",valeurPressionH_Base);
         Pression_Haute();
        request->send(204);
    });
  #endif


       //Send OTA events to the browser
     
    server.begin();
    Serial.println("Serveur actif!");
    
    /*  OTA */
    Serial.println("Ready");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
 
  #ifdef ESP8266
    
    #ifdef SondePH
    /* Lecture EEPROM*/
    EEPROM.begin(40);
    read_EEPROM(addr_PH_ACID, calc_PH_ACID);
    read_EEPROM(addr_Conv_ACID,calc_CONV_ACID);
    read_EEPROM(addr_PH_BASIC,calc_PH_BASIC);
    read_EEPROM(addr_Conv_BASIC,calc_CONV_BASIC);
    #endif
    
    #ifdef SondePression
    /* Lecture EEPROM*/
    EEPROM.begin(40);
    read_EEPROM(addr_Pression_Bas, calc_Pression_Basse);
    read_EEPROM(addr_Conv_Press_Bas,calc_CONV_PressionB);
    read_EEPROM(addr_Pression_Haut,calc_Pression_Haute);
    read_EEPROM(addr_Conv_Press_Haut,calc_CONV_PressionH);
    #endif

  #else
    #ifdef SondePH 
      Base_Value.begin("Base_Value", false); 
      calc_PH_ACID = Base_Value.getInt("PH_Acid",0);
      calc_CONV_ACID = Base_Value.getInt("Conv_Acid",0);
      calc_PH_BASIC = Base_Value.getInt("PH_Basic",0);
      calc_CONV_BASIC = Base_Value.getInt("Conv_Basic",0);

      Serial.printf("PH ACID: %i\n",calc_PH_ACID);
      Serial.printf("Cnv ACID: %i\n",calc_CONV_ACID);
      Serial.printf("PH BASIC: %i\n",calc_PH_BASIC);
      Serial.printf("Conv BASIC: %i\n",calc_CONV_BASIC);
    #endif

    #ifdef SondePression
      Base_Value.begin("Base_Value", false); 
      calc_Pression_Basse = Base_Value.getInt("Pression_Basse",0);
      calc_CONV_PressionB = Base_Value.getInt("Conv_PressionB",0);
      calc_Pression_Haute = Base_Value.getInt("Pression_Haute",0);
      calc_CONV_PressionH = Base_Value.getInt("Conv_PressionH",0);

      Serial.printf("Pression Basse: %i\n",calc_Pression_Basse);
      Serial.printf("Cnv Pression Basse: %i\n",calc_CONV_PressionB);
      Serial.printf("Pression Haute: %i\n",calc_Pression_Haute);
      Serial.printf("Conv Pression Haute: %i\n",calc_CONV_PressionH);
    #endif
  #endif

#endif

#ifdef I2C_On
      /* I2C*/
      Wire.begin(SDA_Send,SCL_Send);
#endif

#ifdef ADS1X15
  /* ADS module conversion*/
     ads.setGain(GAIN_TWOTHIRDS);  // 2/3x gain +/- 6.144V  1 bit = 3mV      0.1875mV (default)    // activate this if you are using a 5V sensor, this one should  be used with Arduino boards
  // ads.setGain(GAIN_ONE);        // 1x gain   +/- 4.096V  1 bit = 2mV      0.125mV               // As the sensor is powered up using 3.3V, this one should be used with 3.3v controller boards
  // ads.setGain(GAIN_TWO);        // 2x gain   +/- 2.048V  1 bit = 1mV      0.0625mV
  // ads.setGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
  // ads.setGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
  // ads.setGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV

  ads.begin();
#endif

#ifdef Ecran  /* Ecran */

// SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
 
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  Serial.println(F("Initialized!"));
 
  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds
 
  // Clear the buffer
  display.clearDisplay();
  // Refresh (apply command)
  display.display();
 
 /* Exemple de prog*/
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Demarrage");
  display.println("en cours");
  display.display();
#endif

#ifdef RF433  
  /*Definition Pin RF433*/
  pinMode(TX_PIN, OUTPUT);
  Serial.println("\n[Oregon V2.1 encoder]");

  /* Envoie des données en RF433 */
  SEND_LOW();  

  #ifdef THN132N  
    // Create the Oregon message for a temperature only sensor (TNHN132N)
    byte ID[] = {0xEA,0x4C};
  #else
    // Create the Oregon message for a temperature/humidity sensor (THGR2228N)
    byte ID[] = {0x1A,0x2D};
  #endif  

  setType(OregonMessageBuffer, ID);
  setChannel(OregonMessageBuffer, 0x20);
#endif
}

/*****************************   LOOP  *************************/

void loop(){

Serial.println();
Serial.print("********* LOOP START *********");

/**** Activation du wifi si BP ON     ****/
#ifdef WIFI_ON
  if (digitalRead(Pin_Inter_Wifi)== LOW){
    if (wifi_enable == 0){
      Wifi_start();
      wifi_enable = 1;
    }
    Serial.println();
    Serial.print("Connected, IP address: ");
    Serial.println(WiFi.localIP());
  }

  else
  {
    if(wifi_enable = 1){
      Serial.println();
      Serial.print("Wifi OFF");
      WiFi.mode(WIFI_OFF);
      wifi_enable = 0; 
    }
  }
#endif


#ifdef ADS1X15  // Calcul des valeurs
   measurings0=0;
   measurings2=0;

    for (int i = 0; i < samples; i++)
    {
       /*Lecture PH depuis entrée direct ESP8266*/
       // measurings += analogRead(PHSensor);
      
      #ifdef SondePH
        /* Module ADS1115*/
        adc0 = ads.readADC_SingleEnded(0);  // Lecture PH depuis entrée 0
        volt0 = ads.computeVolts(adc0);
        measurings0 += adc0;
      #endif
      //adc1 = ads.readADC_SingleEnded(1);
      #ifdef SondePression
        adc2 = ads.readADC_SingleEnded(2);
        volt2 = ads.computeVolts(adc2);
        measurings2 += adc2;
      #endif
      //adc3 = ads.readADC_SingleEnded(3);
    
        delay(10);
    }

  #ifdef SondePH
    PH_Moyen_Input = measurings0/samples;
    PHSend= Cal_Propor(PH_Moyen_Input, calc_PH_ACID,calc_PH_BASIC,calc_CONV_ACID,calc_CONV_BASIC );

    Serial.println();
    Serial.println("***** LOOP PH ******");
    Serial.println("Start Oregon PH");
    Serial.printf("Calcul PH: %f\n",PHSend);
    Serial.printf("PH moyenne Input: %f\n",PH_Moyen_Input);
    Serial.printf("Voltage Direct: %f\n",ads.computeVolts(adc0));
    Serial.println("***** LOOP PH FIN ******");

    #ifdef RF433
    /*Envoie des valeurs. en RF433*/
    oregon_send(0xCC,PHSend);
    #endif

  #endif

  #ifdef SondePression
    Pression_Moyen_Input = measurings2/samples;
    //PressionCalc = Pression_Moyen_Input * 2.66667 - 1; //calc Tension
    // = Pression_Moyen_Input * 0.00063302 -1.53316675; //Calc conv
    //PressionSend= PressionCalc;

    PressionSend=Cal_Propor(Pression_Moyen_Input, calc_Pression_Basse,calc_Pression_Haute,calc_CONV_PressionB,calc_CONV_PressionH );

    Serial.println();
    Serial.println("***** LOOP Pression ******");
    Serial.println("Start Pression");
    /*Serial.printf("Calcul pression: %f\n",PressionSend);*/
    Serial.printf("Pression moyenne Input: %f\n",PressionCalc);
    Serial.printf("Voltage Direct: %f\n",ads.computeVolts(adc2));
    Serial.printf("Measuring2: %f\n",measurings2);
    Serial.printf("Conv: %i\n",adc2);
    Serial.println("***** LOOP pression FIN ******");

    #ifdef RF433
    /*Envoie des valeurs. en RF433*/
    oregon_send(0xCB,PressionSend);
    #endif

  #endif

#endif

#ifdef SondeTEMP    
  /* Sonde de Temperature*/
  float temperature_Sonde[0];
   
  /* Lit les températures des trois capteurs */
  temperature_Sonde[0] = getTemperature(SENSOR_ADDRESS_1);
  //temperature_Sonde[1] = getTemperature(SENSOR_ADDRESS_2);
  //temperature_Sonde[2] = getTemperature(SENSOR_ADDRESS_3);
  
  /* Affiche les températures */
  TempSend=temperature_Sonde[0], 2;
  Serial.println();
  Serial.println("***** LOOP Temp ******");
  Serial.println("Start Oregon Temp");
  Serial.printf("Temperature Input: %f\n", TempSend);
  Serial.println("***** LOOP Temp FIN ******");

  #ifdef RF433
    /*Envoie des valeurs. en RF433*/
    oregon_send(0xBB,TempSend);
  #endif
  
#endif 

#ifdef Ecran 
  
  /* text display */
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  
  #ifdef SondeTEMP
    display.print("Eau:");
    display.print(TempSend);
    display.println("C");
    display.println();
  #endif
  
  #ifdef SondePH
    #ifdef SondePression
      display.setTextSize(0);
      display.setTextColor(WHITE);
    #endif
   
    if ( ((calc_CONV_ACID + 500) < adc0) || ((calc_CONV_BASIC - 500)> adc0)){
       display.printf("Conv Value\nOut: %i",adc0); 
       display.println();
      }
    else{
      display.print("PH: ");
      display.println(PHSend);
      display.printf("Conv:%i",adc0); 
    }
  #endif

  #ifdef SondePression
    display.print("Pression: ");
    display.println(PressionSend);
    display.printf("Conv:%i",adc2);
    //display.printf("Tension:%f",ads.computeVolts(adc2));
  #endif
  
 display.display();
#endif 
}
